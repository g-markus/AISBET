<example>
<scenario>
# Task 1 refers to the following initial situation:

The "Wilder Garten" park in Cologne, with its rich plant diversity, its beautiful winding paths, its many shady spots, and its popular attractions, was able to increase its appeal as a local recreational area for many visitors last season. Visitors of all ages and tour operators are among the park's customers.
</scenario>

<problem>
## 1. Task (25 points)

The park administration would like to obtain an analysis of visitor numbers for all days of a given month.

The following information is therefore recorded for visitor tickets at the entrances and exits:

*   The ticket is scanned upon entry, saving the date, time, and number of people (group tickets).
*   Upon exiting, each person is individually recorded with the date and time.

The park is currently open from 9:00 a.m. to 7:00 p.m.

For analysis, we need to record how many people were present for each day of a month from 9:00 a.m. to 9:59 a.m., from 10:00 a.m. to 10:59 a.m.,..., and from 6:00 p.m. to 6:59 p.m.
</problem>

<data_elements>
The following class already exists:

@startuml
class ComeLeave {
- date: Date
- comeInOut: Integer
- noPeople: Integer
'... (Ellipsis in original indicates potentially more members)
}
@enduml

Public access methods (set/get) are available for each attribute.

The following methods can be used:

| Method | Description |
| :--------------------------- | :----------------------------------------------------- |
| `getDay()` of the Date class | Determines the day (1 – 31) for the date |
| `getHour()` of the Date class | Determines the hour (0 – 23) for the date |
| `getDaysOfMonth()` of the Date class | Determines the number of days in the month for the date |

The `entry` table of type `ComeLeave` records the arrival and departure times of visitors for the month to be evaluated (one row corresponds to the attributes of an object of type `ComeLeave`):

| date | time | comeInOut <br> 0 = In / 1 = Out | noPeople |
| :----------- | :------- | :----------------------------- | :------- |
|... |... |... |... |
| 22.5.2023 | 9:00 | 0 | 1 |
| 22.5.2023 | 9:00 | 0 | 2 |
| May 22, 2023 | 9:01 AM | 0 | 30 |
|... |... |... |... |
| May 22, 2023 | 12:00 PM | 1 | 1 |
| May 22, 2023 | 12:01 PM | 0 | 2 |
| May 22, 2023 | 12:02 PM | 1 | 1 |
|... |... |... |... |

Example array for a result:

| Day\\Hour | 9:00-9:59 | 10:00-10:59 | 11:00-11:59 | 12:00-12:59 | 13:00-13:59 | 14:00-14:59 | 15:00-15:59 | 16:00-16:59 | 17:00-17:59 | 18:00-18:59 |
| :-------- | :---------- | :---------- | :---------- | :---------- | :---------- | :---------- | :---------- | :---------- | :---------- | :---------- |
| 1 | 23 | 40 | 56 | 120 | 145 | 160 | 140 | 95 | 86 | 45 |
| 2 | 27 |... |... |... |... |... |... |... |... |... |
|... |... |... |... |... |... |... |... |... |... |... |
| 31 |... |... |... |... |... |... |... |... |... |... |
</data_elements>

<pseudocode_task>
Create a function `countVisitors(entry: ComeLeave): Integer` that fulfills the following requirement:

*   For each hour of a day (opening hours!) and for each day of the month to be evaluated, the number of people present should be stored in a two-dimensional array of type integer.
One row should be used for each day of the month and one column for each hour within the opening hours.
This array is the return value of the `countVisitors()` function.
A person is counted starting from a certain hourly period when they enter the park during that period. When a person leaves the park, the count is only adjusted accordingly for subsequent periods.
</pseudocode_task>
</example>
<example>
<scenario>
# The task relates to the following initial situation:
AMAG Softa AG is a manufacturer of batteries and accumulators for e-bikes, e-scooters, pedelecs, and e-scooters.

The shareholders meet at the headquarters for their annual shareholders' meeting.

AMAG Soft AG would like to offer its shareholders an e-service with various application options in the future.

To implement this project, "Developing an e-service platform" for shareholders of AMAG Soft AG, a project group is being formed, in which you are to participate.
</scenario>

<problem>
# 1. Task

Management would like to be able to sort stock prices according to any criterion. Therefore, a comparison function should be used for comparison within the sorting algorithm.
</problem>

<data_elements>
A Daily Price class already exists that provides information about a stock. There is also an array kurse that stores objects of the Daily Price type.

## Daily Price class

@startuml
class Daily Price {
- date : Date
- shareprice : double
- daxValue : double
- prozVShare : double // percentage change of share compared to the previous day's value
- prozVDAX : double // percentage comparison of DAX to the previous day's value
}
@enduml

There are public get methods for each attribute.

## Listing the data of the daily price objects from the prices array

|date|shareprice|daxValue|prozVShare|prozVDAX|
|---|---|---|---|---|
|April 15, 2024|100|15000|0.0300|0.0500|
|April 16, 2024|105|15100|0.0500|0.0067|
|17.04.2024|110|14900|0.0476|-0.0132|
|...|||||
</data_elements>

<pseudocode_task>
## a) For the sorting function sort(DailyPrice prices, Function compare): void, the Function object compare is passed.

The function contained in the Function object can be called in the sorting algorithm as follows:
compare(dailyPriceA, dailyPriceB)

The compare function returns a value > 0 if dailyPriceB should be sorted before dailyPriceA.

Specify a sorting algorithm of your choice in the pseudocode and name the selected sorting algorithm.

sort (DailyPrice prices, Function compare) : void

## b) Management wants to know on how many days the AMAG Soft AG share price was "better" than the DAX on that day.

The percentage changes in the stock price and the DAX value compared to the previous day are stored in the objects of the Daily Price class.

The stock price quote is considered "better" than the DAX if the percentage change in the stock price was greater than that of the DAX.

The corresponding data is contained in the array prices of type Daily Price.

Create an algorithm for a function quotePlus(Daily Price prices) :Integer that determines on how many days the percentage change in the stock price was "better" than that of the DAX and returns this value.

quotePlus(Daily Price prices):Integer
</pseudocode_task>
</example>
<example>
<scenario>
# The task relates to the following initial situation:

A nationwide educational provider offers conferences, seminars, and events at eight attractive locations. A total of 45 seminar rooms with more than 600 IT workstations are available at these locations. Training courses can also be booked online.

All IT services are provided by two data centers.

Since not all training and office spaces are currently fully utilized, the space resources will be made available to customers for individual needs in the future.

---
</scenario>

<problem>
### 1. Task (25 points)

As part of the development of learning software, a sorting algorithm for an array of room objects must first be created. The sorting should be done in ascending order according to the number of rooms occupied.
</problem>

<data_elements>
plantuml
@startuml
class Room {
.. Unspecified attributes / methods..
+ getOccupancy(): Integer
.. Unspecified attributes / methods..
}
@enduml

The sorting algorithm can, for example, work according to the following procedure:

Compare the first two elements, swapping if necessary
Compare the second and third elements, swapping if necessary
Continue with the nth and n+1st elements until the end of the array
Repeat until the array is sorted

```plantuml
@startuml
class Employee {
.. Unspecified attributes / methods..
+ getSalary(): Double
.. Unspecified attributes / methods..
}
@enduml
@startuml
class "List<T>" as List {
.. Unspecified attributes / methods..
+ get(index: Integer) : T
+ set(index: Integer, element: T) : void
+ size() : Integer
.. Unspecified attributes / methods..
}
@enduml

Using a Function<T> object (example):
</data_elements>

<pseudocode_task>
a) Create an algorithm that sorts an array of Room objects using the specified method or an alternative method. Specify the algorithm in pseudocode. (10 points)

void sort(rooms: Array of Room)

b) To make the sorting algorithm more flexible, a function is needed that...
* returns the value 0 if the two objects passed to the function are equal ("large"),
* returns a positive value if the first parameter is larger than the second, and
* returns a negative value in the remaining cases.

Create a function `compareEmployee(Employee m1, Employee m2)` that takes two Employee objects as parameters and returns a corresponding value. The employees should be compared based on their salary.

Specify the algorithm in pseudocode, a structure diagram, or as a PAP. *(5 points)*

compareEmployee(Employee m1, Employee m2): Integer

c) To create an improved sorting algorithm, the existing generic class `Function<T>` should be used. A Function object can store a function that accepts two parameters of type T and returns an integer value.

In addition, the existing generic class `List<T>`, which stores objects of type T, should be used for the new sorting algorithm.

Update your sorting algorithm so that it receives a List<T> object and a Function<T> object as parameters. The function stored in the Function<T> object should be used for comparison in the sorting algorithm. (7 points)

sort(List<T> list, Function<T> f): void
</pseudocode_task>
</example>
<example>
<scenario>
Tasks 1 refers to the following initial situation:
AMAG Soft GmbH specializes in software development for the entire field, from cultivation to distribution of wine products.

Data such as precipitation, temperature, and leaf coloration can be collected using local measuring points in the vineyard and autonomous drones.
</scenario>

<problem>
Task 1 (25 points)

The order in which the drones fly to specified geopositions must be determined.

Starting from the current position, the position closest to the current position should always be flown to next.
</problem>

<data_elements>
The positions to be flown to are stored in a one-dimensional array `geoPositions` as objects of the class `GeoPos`.

@startuml
class GeoPos {
- latitude: double
- longitude: double
- altitude: double
}
@enduml

Public access methods (set/get) are available for each attribute.

The `getDistance` method of the `GeoCalculator` class can be used to calculate distances between geopositions:

@startuml
class GeoCalculator {
+ {static} getDistance(pos1: GeoPos, pos2: GeoPos): double
}
@enduml

The algorithm for the drone flight should store and return its result in an array `flightPositions`. The operation of the `calculateFlight()` algorithm is described as follows:

- The `geoPositions` array can be modified by the algorithm.
- The geoposition with index 0 of the `geoPositions` array becomes the first current position. This position is stored in the `flightPositions` array (starting position!) and can then be deleted from the array of positions still to be flown to (`geoPositions`). Note: already implemented, see default.
- As long as there are still geopositions in the `geoPositions` array:
Determine the position in the `geoPositions` array with the shortest distance to the current position.
This position is stored in the `flightPositions` array and becomes the new current position.
This position can then be deleted from the `geoPositions` array.

Note: The largest double value can be retrieved using `Double.MAX_VALUE`.
</data_elements>

<pseudocode_task>
Complete the following pseudocode accordingly.

calculateFlight(geoPositions: GeoPos) : GeoPos

flight_positions = new GeoPos[geoPositions.length] // Array of the positions flown to
flightPositions = geoPositions // Position 0 as the starting position
currentPos = geoPositions
geoPositions.remove(0) // remove from the array of positions still to be flown to
</pseudocode_task>
</example>
<example>
<scenario>
# The task relates to the following initial situation:

The local transport system (KVAG) in Kiel is to be expanded to include a new light rail system. In connection with this expansion, the KVAG's IT systems are to be expanded. Various subprojects are being defined for this purpose. These include timetable information, booking systems, displays, and networking. All subprojects are to be examined with regard to data protection and data security requirements.
</scenario>

<problem>
# 1. Task
KVAG wants to better align its timetables with actual travel times. To this end, the departure times of a train at individual stops for a journey on a train line were measured on several days.

For each day, the time the train left the subsequent stops is recorded (see array times).
</problem>

<data_elements>
## Image description

- The image shows the stops and route sections
- Stop 0 is the departure point
- Route section 0 is between stop 0 and stop 1
- Route section 1 is between stop 1 and stop 2
- and so on
- Route section 14 is between stop 14 and stop 15
- Stop 15 is the final stop

## Description of the Departure Times class There is a Departure Time class whose attributes store a date, a stop number, the scheduled departure time (in minutes since midnight), and the actual departure time (also in minutes). The scheduled and actual arrival times for the final stop are stored here.

## Class Departure Times

@startuml
class DepartureTime {
- date : Date
- stopNumber : int
- plannedDeparture : int // Planned departure time in minutes since midnight
- actualDeparture : int // Actual departure time in minutes since midnight
}
@enduml

A public getter method is available for each attribute.

The one-dimensional array times of type DepartureTime stores the data for the period under review. The data of a DepartureTime object is listed in a cell.

## Listing of the data of the array times
|Date|StopNumber|Scheduled Departure|Actual Departure|
|---|---|---|---|
|1.9.24|0|480|480|
|1.9.24|1|483|483|
|1.9.24|2|485|486|
|...||||
|1.9.24|15|579|583|
|2.9.24|0|480|480|
|2.9.24|1|483|484|
|...||||
|2.9.24|15|579|582|
|...||||

## Result array (example):
|Index|Number of travel times > 2|Comment|
|0|0| Number of delays (0 in the example) on route 0|
|1|1|... on route 1|
|0|0|... on route 2|
|...|...|...|
|14|3|... on route 14|
</data_elements>

<pseudocode_task>
The travel time on a route is the difference between two departure times from consecutive stops. A delay occurs if the travel time on a route is more than two minutes longer than the scheduled travel time.

An algorithm for a function

determineTravelTimes(DepartureTime times) : Integer

is to be developed that determines the number of delays for each of the 15 routes.

The determined frequencies are to be stored in a one-dimensional array of type Integer and returned by the function.

Represent the algorithm in pseudocode.

determine_travel_times(Departure_time times) : Integer
</pseudocode_task>
</example>
